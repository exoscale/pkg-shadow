From: Michael Terry <michael.terry@canonical.com>
Date: Fri, 20 Dec 2019 16:45:51 +0100
Subject: Add support to passwd for updating libnss-extrausers locations

---
 lib/commonio.c |  2 ++
 lib/defines.h  |  8 ++++++++
 src/passwd.c   | 65 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 src/usermod.c  | 48 +++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 122 insertions(+), 1 deletion(-)

--- a/lib/commonio.c
+++ b/lib/commonio.c
@@ -403,6 +403,7 @@ int commonio_lock (struct commonio_db *d
 	int i;
 
 #ifdef HAVE_LCKPWDF
+  if (strncmp(db->filename, "/etc/", 5) == 0) {
 	/*
 	 * Only if the system libc has a real lckpwdf() - the one from
 	 * lockpw.c calls us and would cause infinite recursion!
@@ -432,6 +433,7 @@ int commonio_lock (struct commonio_db *d
 		ulckpwdf ();
 		return 0;		/* failure */
 	}
+  } /* strncmp(db->filename, "/etc/", 5) == 0 */
 #endif				/* !HAVE_LCKPWDF */
 
 	/*
--- a/lib/defines.h
+++ b/lib/defines.h
@@ -267,6 +267,14 @@ static inline void memzero(void *ptr, si
 #endif
 #endif
 
+#ifndef EXTRAUSERS_PASSWD_FILE
+#define EXTRAUSERS_PASSWD_FILE "/var/lib/extrausers/passwd"
+#endif
+
+#ifndef EXTRAUSERS_SHADOW_FILE
+#define EXTRAUSERS_SHADOW_FILE "/var/lib/extrausers/shadow"
+#endif
+
 #ifndef NULL
 #define NULL ((void *) 0)
 #endif
--- a/src/passwd.c
+++ b/src/passwd.c
@@ -536,8 +536,15 @@ static void update_noshadow (void)
 {
 	const struct passwd *pw;
 	struct passwd *npw;
+	bool try_extrausers = strcmp (pw_dbname (), EXTRAUSERS_PASSWD_FILE) != 0 &&
+	                      access (EXTRAUSERS_PASSWD_FILE, F_OK) == 0;
 
 	if (pw_lock () == 0) {
+		if (try_extrausers) {
+			pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+			update_noshadow ();
+			return;
+		}
 		(void) fprintf (stderr,
 		                _("%s: cannot lock %s; try again later.\n"),
 		                Prog, pw_dbname ());
@@ -545,6 +552,20 @@ static void update_noshadow (void)
 	}
 	pw_locked = true;
 	if (pw_open (O_CREAT | O_RDWR) == 0) {
+		if (try_extrausers) {
+			if (pw_unlock () == 0) {
+				(void) fprintf (stderr,
+				                _("%s: failed to unlock %s\n"),
+				                Prog, pw_dbname ());
+				SYSLOG ((LOG_ERR, "failed to unlock %s", pw_dbname ()));
+				/* continue */
+			}
+			pw_locked = false;
+
+			pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+			update_noshadow ();
+			return;
+		}
 		(void) fprintf (stderr,
 		                _("%s: cannot open %s\n"),
 		                Prog, pw_dbname ());
@@ -553,6 +574,21 @@ static void update_noshadow (void)
 	}
 	pw = pw_locate (name);
 	if (NULL == pw) {
+		if (try_extrausers) {
+			(void) pw_close ();
+			if (pw_unlock () == 0) {
+				(void) fprintf (stderr,
+				                _("%s: failed to unlock %s\n"),
+				                Prog, pw_dbname ());
+				SYSLOG ((LOG_ERR, "failed to unlock %s", pw_dbname ()));
+				/* continue */
+			}
+			pw_locked = false;
+
+			pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+			update_noshadow ();
+			return;
+		}
 		(void) fprintf (stderr,
 		                _("%s: user '%s' does not exist in %s\n"),
 		                Prog, name, pw_dbname ());
@@ -590,8 +626,15 @@ static void update_shadow (void)
 {
 	const struct spwd *sp;
 	struct spwd *nsp;
+	bool try_extrausers = strcmp (spw_dbname (), EXTRAUSERS_SHADOW_FILE) != 0 &&
+	                      access (EXTRAUSERS_SHADOW_FILE, F_OK) == 0;
 
 	if (spw_lock () == 0) {
+		if (try_extrausers) {
+			spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+			update_shadow ();
+			return;
+		}
 		(void) fprintf (stderr,
 		                _("%s: cannot lock %s; try again later.\n"),
 		                Prog, spw_dbname ());
@@ -599,6 +642,20 @@ static void update_shadow (void)
 	}
 	spw_locked = true;
 	if (spw_open (O_CREAT | O_RDWR) == 0) {
+		if (try_extrausers) {
+			if (spw_unlock () == 0) {
+				(void) fprintf (stderr,
+						        _("%s: failed to unlock %s\n"),
+						        Prog, spw_dbname ());
+				SYSLOG ((LOG_ERR, "failed to unlock %s", spw_dbname ()));
+				/* continue */
+			}
+			spw_locked = false;
+
+			spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+			update_shadow ();
+			return;
+		}
 		(void) fprintf (stderr,
 		                _("%s: cannot open %s\n"),
 		                Prog, spw_dbname ());
@@ -609,7 +666,9 @@ static void update_shadow (void)
 	if (NULL == sp) {
 		/* Try to update the password in /etc/passwd instead. */
 		(void) spw_close ();
-		update_noshadow ();
+		if (!try_extrausers) {
+			update_noshadow ();
+		}
 		if (spw_unlock () == 0) {
 			(void) fprintf (stderr,
 			                _("%s: failed to unlock %s\n"),
@@ -618,6 +677,10 @@ static void update_shadow (void)
 			/* continue */
 		}
 		spw_locked = false;
+		if (try_extrausers) {
+			spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+			update_shadow ();
+		}
 		return;
 	}
 	nsp = __spw_dup (sp);
--- a/src/usermod.c
+++ b/src/usermod.c
@@ -1584,7 +1584,18 @@ static void close_files (void)
  */
 static void open_files (void)
 {
+	bool try_extrausers = strcmp (pw_dbname (), EXTRAUSERS_PASSWD_FILE) != 0 &&
+	                      access (EXTRAUSERS_PASSWD_FILE, F_OK) == 0;
+
 	if (pw_lock () == 0) {
+		if (try_extrausers) {
+			pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+			spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+			gr_setdbname (EXTRAUSERS_GROUP_FILE);
+			sgr_setdbname (EXTRAUSERS_SHADOWGROUP_FILE);
+			open_files ();
+			return;
+		}
 		fprintf (stderr,
 		         _("%s: cannot lock %s; try again later.\n"),
 		         Prog, pw_dbname ());
@@ -1592,12 +1603,29 @@ static void open_files (void)
 	}
 	pw_locked = true;
 	if (pw_open (O_CREAT | O_RDWR) == 0) {
+		if (try_extrausers) {
+			pw_unlock ();
+			pw_locked = false;
+			pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+			spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+			open_files ();
+			return;
+		}
 		fprintf (stderr,
 		         _("%s: cannot open %s\n"),
 		         Prog, pw_dbname ());
 		fail_exit (E_PW_UPDATE);
 	}
 	if (is_shadow_pwd && (spw_lock () == 0)) {
+		if (try_extrausers) {
+			pw_close ();
+			pw_unlock ();
+			pw_locked = false;
+			pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+			spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+			open_files ();
+			return;
+		}
 		fprintf (stderr,
 		         _("%s: cannot lock %s; try again later.\n"),
 		         Prog, spw_dbname ());
@@ -1605,6 +1633,17 @@ static void open_files (void)
 	}
 	spw_locked = true;
 	if (is_shadow_pwd && (spw_open (O_CREAT | O_RDWR) == 0)) {
+		if (try_extrausers) {
+			pw_close ();
+			pw_unlock ();
+			spw_unlock ();
+			pw_locked = false;
+			spw_locked = false;
+			pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+			spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+			open_files ();
+			return;
+		}
 		fprintf (stderr,
 		         _("%s: cannot open %s\n"),
 		         Prog, spw_dbname ());
@@ -1617,6 +1656,14 @@ static void open_files (void)
 		 * group entries.
 		 */
 		if (gr_lock () == 0) {
+			if (try_extrausers) {
+				pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+				spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+				gr_setdbname (EXTRAUSERS_GROUP_FILE);
+				sgr_setdbname (EXTRAUSERS_SHADOWGROUP_FILE);
+				open_files ();
+				return;
+			}
 			fprintf (stderr,
 			         _("%s: cannot lock %s; try again later.\n"),
 			         Prog, gr_dbname ());
@@ -1624,6 +1671,16 @@ static void open_files (void)
 		}
 		gr_locked = true;
 		if (gr_open (O_CREAT | O_RDWR) == 0) {
+			if (try_extrausers) {
+				gr_unlock ();
+				gr_locked = false;
+				pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+				spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+				gr_setdbname (EXTRAUSERS_GROUP_FILE);
+				sgr_setdbname (EXTRAUSERS_SHADOWGROUP_FILE);
+				open_files ();
+				return;
+			}
 			fprintf (stderr,
 			         _("%s: cannot open %s\n"),
 			         Prog, gr_dbname ());
@@ -1631,6 +1688,16 @@ static void open_files (void)
 		}
 #ifdef SHADOWGRP
 		if (is_shadow_grp && (sgr_lock () == 0)) {
+			if (try_extrausers) {
+				gr_unlock ();
+				gr_locked = false;
+				pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+				spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+				gr_setdbname (EXTRAUSERS_GROUP_FILE);
+				sgr_setdbname (EXTRAUSERS_SHADOWGROUP_FILE);
+				open_files ();
+				return;
+			}
 			fprintf (stderr,
 			         _("%s: cannot lock %s; try again later.\n"),
 			         Prog, sgr_dbname ());
@@ -1693,11 +1760,22 @@ static void usr_update (void)
 	struct spwd spent;
 	const struct spwd *spwd = NULL;
 
+	bool try_extrausers = strcmp (pw_dbname (), EXTRAUSERS_PASSWD_FILE) != 0 &&
+	                      access (EXTRAUSERS_PASSWD_FILE, F_OK) == 0;
+
 	/*
 	 * Locate the entry in /etc/passwd, which MUST exist.
 	 */
 	pwd = pw_locate (user_name);
 	if (NULL == pwd) {
+		if (try_extrausers) {
+			close_files ();
+			pw_setdbname (EXTRAUSERS_PASSWD_FILE);
+			spw_setdbname (EXTRAUSERS_SHADOW_FILE);
+			open_files ();
+			usr_update ();
+			return;
+		}
 		fprintf (stderr,
 		         _("%s: user '%s' does not exist in %s\n"),
 		         Prog, user_name, pw_dbname ());
